name: CI

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'examples/**'
      - '**/*.ipynb'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'examples/**'
      - '**/*.ipynb'
  workflow_dispatch:
    inputs:
      run_integration:
        description: 'Run integration tests (requires services)'
        required: false
        default: 'false'
        type: choice
        options: ['false','true']

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    outputs:
      integration: ${{ steps.integration_filter.outputs.integration }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect integration-impacting changes
        id: integration_filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            integration:
              - 'docker-compose.yml'
              - 'Makefile'
              - 'halligan/**'
              - 'benchmark/**'
              - '.github/workflows/**'

      - name: Set up Pixi (with cache)
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          manifest-path: halligan/pyproject.toml
          cache: false
          run-install: false

      - name: Restore models cache
        uses: actions/cache/restore@v4
        with:
          path: halligan/.cache/models
          key: models-${{ hashFiles('halligan/get_models.sh') }}
          restore-keys: |
            models-

      - name: Install deps (CPU)
        working-directory: halligan
        run: pixi install

      - name: Run pre-commit (apply fixes)
        working-directory: halligan
        run: pixi run precommit || true

      - name: Verify pre-commit is clean
        working-directory: halligan
        run: pixi run precommit

      - name: Run unit tests (skip integration) with JUnit
        working-directory: halligan
        run: |
          mkdir -p test-results
          pixi run pytest -m 'not integration' --junitxml=test-results/junit.xml -vv
        continue-on-error: false

      - name: Save models cache
        if: always() && steps.models_dir.outputs.present == 'true'
        uses: actions/cache/save@v4
        with:
          path: halligan/.cache/models
          key: models-${{ hashFiles('halligan/get_models.sh') }}

      - name: Check models dir exists
        id: models_dir
        if: always()
        run: |
          if [ -d halligan/.cache/models ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: halligan/test-results
          if-no-files-found: ignore

      - name: Upload logs if present
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            halligan/**/*.log
            **/.pytest_cache/**
          if-no-files-found: ignore

  integration:
    if: >-
      ${{ inputs.run_integration == 'true' ||
          (github.event_name == 'push' &&
           needs.lint-and-test.outputs.integration == 'true') ||
          (github.event_name == 'pull_request' &&
           (contains(github.event.pull_request.labels.*.name, 'run-integration') ||
            needs.lint-and-test.outputs.integration == 'true')) }}
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and start services
        run: |
          docker compose up -d --build
          # Allow services to warm up
          sleep 10

      - name: Export service endpoints
        run: |
          echo "BROWSER_URL=ws://127.0.0.1:5000/?ws=1" >> $GITHUB_ENV
          echo "BENCHMARK_URL=http://127.0.0.1:3334" >> $GITHUB_ENV

      - name: Wait for benchmark health
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:3334/health | grep -q '"status":"ok"'; then
              exit 0
            fi
            sleep 2
          done
          echo "Benchmark not healthy" >&2
          docker compose logs benchmark || true
          exit 1

      - name: Set up Pixi (with cache)
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          manifest-path: halligan/pyproject.toml
          cache: false
          run-install: false

      - name: Restore models cache
        uses: actions/cache/restore@v4
        with:
          path: halligan/.cache/models
          key: models-${{ hashFiles('halligan/get_models.sh') }}
          restore-keys: |
            models-

      - name: Install deps (CPU)
        working-directory: halligan
        run: pixi install

      - name: Run integration tests
        working-directory: halligan
        run: |
          mkdir -p test-results
          pixi run pytest -m integration --junitxml=test-results/junit-integration.xml -vv

      - name: Check models dir exists (integration)
        id: models_dir_integ
        if: always()
        run: |
          if [ -d halligan/.cache/models ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          fi

      - name: Save models cache (integration)
        if: always() && steps.models_dir_integ.outputs.present == 'true'
        uses: actions/cache/save@v4
        with:
          path: halligan/.cache/models
          key: models-${{ hashFiles('halligan/get_models.sh') }}

      - name: Upload integration results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: halligan/test-results
          if-no-files-found: ignore
